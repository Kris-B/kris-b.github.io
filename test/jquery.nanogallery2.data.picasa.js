/**!
 * @preserve nanoGALLERY2 v0.1.0
 * Plugin for jQuery by Christophe Brisbois
 * Demo: http://nanogallery.brisbois.fr
 * Sources: https://github.com/Kris-B/nanoGALLERY
 *
 * License: For personal, non-profit organizations, or open source projects (without any kind of fee), you may use nanoGALLERY for jQuery for free. 
 * -------- ALL OTHER USES REQUIRE THE PURCHASE OF A PROFESSIONAL LICENSE.
 * 
 * 
 * Components:
 *  - jQuery (http://www.jquery.com) - version >= 1.7.1
 *  - jQuery Color plugin - is embedded
 *  - imagesloaded (https://github.com/desandro/imagesloaded) - is embebed
 *  - screenfull.js (https://github.com/sindresorhus/screenfull.js) - is embeded
 *  - shifty (https://github.com/jeremyckahn/shifty) - is embeded
 *  - webfont generated by http://fontello.com - based on Font Awesome Copyright (C) 2012 by Dave Gandy (http://fortawesome.github.com/Font-Awesome/)
 *  - javascript minifying: grunt-contrib-uglify (https://github.com/gruntjs/grunt-contrib-uglify)
 *  - css minifying: grunt-contrib-cssmin (https://github.com/gruntjs/grunt-contrib-cssmin)
 
 https://github.com/airbnb/javascript
 
 
 */
 

/*

nanoGALLERY v0.1.0 release notes.

**Visit nG2 homepage for usage details: [http://nanogallery2.brisbois.fr](http://www.nanogallery.brisbois.fr/)**

*/

// ###########################################
// ##### nanoGALLERY2 as a JQUERY PLUGIN #####
// ###########################################
;(function ($) {
  
  if (!$.nanoGallery2.data) {
    // create namespace
    $.nanoGallery2.data = {};
  };
  // if( jQuery.nanoGallery2.data == undefined ) { jQuery.nanoGallery2.data = {}; }
  
  
  jQuery.nanoGallery2.data.picasa = function (instance, fnName){
    var G=instance;      // nanoGALLERY instance

    // ### Picasa/Google+
    // square format : 32, 48, 64, 72, 104, 144, 150, 160 (cropped)
    // details: https://developers.google.com/picasa-web/docs/2.0/reference
    picasa = {
      url: function() {
        // return (location.protocol=='https:' ? 'https://picasaweb.google.com/data/feed/api/' : 'https://picasaweb.google.com/data/feed/api/');
        return ( G.O.picasaUseUrlCrossDomain ? 'https://photos.googleapis.com/data/feed/api/' : 'https://picasaweb.google.com/data/feed/api/');
      },
      thumbSize:64,
      thumbAvailableSizes : new Array(32, 48, 64, 72, 94, 104, 110, 128, 144, 150, 160, 200, 220, 288, 320, 400, 512, 576, 640, 720, 800, 912, 1024, 1152, 1280, 1440, 1600),
      thumbAvailableSizesCropped : ' 32 48 64 72 104 144 150 160 '
    };
    
    
    /** @function AlbumGetContent */
    var AlbumGetContent = function(albumID, fnToCall, fnParam1, fnParam2) {
      var url='';
      var kind='image';
      // var albumIdx=getNGItemIdx(albumID);
      var albumIdx=NGY2Item.GetIdx(G, albumID);

      if( albumIdx == 0 ) {
        // retrieve the list of albums
        url = picasa.url() + 'user/'+G.O.userID+'?alt=json&kind=album&thumbsize='+G.picasa.thumbSizes+'&rnd=' + (new Date().getTime());
        kind='album';
      }
      else {
        // retrieve the content of one album (=photos)
        var opt='';
        //if( typeof G.I[albumIdx].customData.authkey !== 'undefined' ) { opt=G.I[albumIdx].customData.authkey; }
        // url = G.picasa.url() + 'user/'+G.O.userID+'/albumid/'+G.I[albumIdx].GetID()+'?alt=json&kind=photo'+opt+'&thumbsize='+G.picasa.thumbSizes+'&imgmax=d';
        url = picasa.url() + 'user/'+G.O.userID+'/albumid/'+albumID+'?alt=json&kind=photo'+opt+'&thumbsize='+G.picasa.thumbSizes+'&imgmax=d';
      }

      NGY2Tools.PreloaderDisplay(G, true);

      jQuery.ajaxSetup({ cache: false });
      jQuery.support.cors = true;
      
      var tId = setTimeout( function() {
        // workaround to handle JSONP (cross-domain) errors
        //PreloaderHide();
        NGY2Tools.PreloaderDisplay(G, false);
        NGY2Tools.nanoAlert(G, 'Could not retrieve AJAX data...');
      }, 60000 );
      jQuery.getJSON(url, function(data, status, xhr) {
        clearTimeout(tId);
        //PreloaderHide();
        NGY2Tools.PreloaderDisplay(G, false);

        picasaParseData( albumIdx, kind, data, fnToCall );
        if( fnToCall !== null &&  fnToCall !== undefined) {
          fnToCall( fnParam1, fnParam2, null );
        }

      })
      .fail( function(jqxhr, textStatus, error) {
        clearTimeout(tId);
        //PreloaderHide();
        NGY2Tools.PreloaderDisplay(G, false);
        var err = textStatus + ', ' + error;
        NGY2Tools.nanoAlert(G, "Could not retrieve ajax data (jQuery): " + err);
      });

      
    }

    
    function picasaParseData(albumIdx, kind, data) {
      var nb=0;
      var albumID=G.I[albumIdx].GetID();
      // var albumIdx=getNGItemIdx(albumID);

      
      var source = data.feed.entry;
      
      // data sorting
      var sortOrder=G.O.albumSorting;
      if (kind =='image'){
        sortOrder=G.O.photoSorting;
      }

      switch( sortOrder ) {
        case 'random':
          source = NGY2Tools.AreaShuffle(source);
          break;
        case 'reversed':
          source = source.reverse();
          break;
        case 'titleAsc':
          source.sort(function (a, b) {
            // var x =  kind == 'image' ? a.media$group.media$description.$t.toUpperCase() : a.media$group.media$title.$t.toUpperCase();
            // var y =  kind == 'image' ? b.media$group.media$description.$t.toUpperCase() : b.media$group.media$title.$t.toUpperCase();
            var x='', y='';
            if( kind == 'image' ) {
              if( G.O.thumbnailLabel.get('title') != '' ) {
                x=NGY2Tools.GetImageTitleFromURL(unescape(unescape(unescape(unescape(a.media$group.media$content[0].url)))));
                y=NGY2Tools.GetImageTitleFromURL(unescape(unescape(unescape(unescape(b.media$group.media$content[0].url)))));
              }
              else {
                x = a.media$group.media$description.$t.toUpperCase();
                y = b.media$group.media$description.$t.toUpperCase();
              }
            }
            else {
              x = a.media$group.media$title.$t.toUpperCase();
              y = b.media$group.media$title.$t.toUpperCase();
            }
            return( (x < y) ? -1 : ((x > y) ? 1 : 0) );
          });
          break;
        case 'titleDesc':
          source.sort(function (a, b) {
            // var x =  kind == 'image' ? a.media$group.media$description.$t.toUpperCase() : a.media$group.media$title.$t.toUpperCase();
            // var y =  kind == 'image' ? b.media$group.media$description.$t.toUpperCase() : b.media$group.media$title.$t.toUpperCase();
            var x='', y='';
            if( kind == 'image' ) {
              if( G.O.thumbnailLabel.get('title') != '' ) {
                x=NGY2Tools.GetImageTitleFromURL(unescape(unescape(unescape(unescape(a.media$group.media$content[0].url)))));
                y=NGY2Tools.GetImageTitleFromURL(unescape(unescape(unescape(unescape(b.media$group.media$content[0].url)))));
              }
              else {
                x = a.media$group.media$description.$t.toUpperCase();
                y = b.media$group.media$description.$t.toUpperCase();
              }
            }
            else {
              x = a.media$group.media$title.$t.toUpperCase();
              y = b.media$group.media$title.$t.toUpperCase();
            }
            return( (x > y) ? -1 : ((x < y) ? 1 : 0) );
          });
          break;
      }

      
      
      // iterate and parse each item
      jQuery.each(source, function(i,data){
        
        //Get the title 
        var imgUrl=data.media$group.media$content[0].url;
        var itemTitle = '';
        if( kind == 'image') {
          // itemTitle=data.media$group.media$title.$t;
          itemTitle=data.media$group.media$description.$t;
          if( G.O.thumbnailLabel.get('title') != '' ) {
            // use filename for the title (from URL)
            itemTitle=NGY2Tools.GetImageTitleFromURL(unescape(unescape(unescape(unescape(imgUrl)))));
          }
        }
        else {
          itemTitle=data.title.$t;
        }
        
        //Get the description
        var filename='';
        var itemDescription = data.media$group.media$description.$t;
        if( kind == 'image') { 
          filename=itemTitle;
          itemTitle=itemDescription;
          itemDescription='';
        }

          var itemID = data.gphoto$id.$t;
        if( !(kind == 'album' && !NGY2Tools.FilterAlbumName(G, itemTitle, itemID)) ) {

          nb++;
          var newItem=NGY2Item.New( G, itemTitle, itemDescription, itemID, albumID, kind );
          newItem.imageNumber=nb;
        
          //Get the URL of the thumbnail
          var itemThumbURL = data.media$group.media$thumbnail[0].url;
          
          var src='';
          if( kind == 'image' ) {
            src=imgUrl;
            var s=imgUrl.substring(0, imgUrl.lastIndexOf('/'));
            s=s.substring(0, s.lastIndexOf('/')) + '/';
            if( window.screen.width >  window.screen.height ) {
              src=s+'w'+window.screen.width+'/'+filename;
            }
            else {
              src=s+'h'+window.screen.height+'/'+filename;
              }
            newItem.src=src;
            
            
          }
          else {
            newItem.author=data.author[0].name.$t;
            newItem.numberItems=data.gphoto$numphotos.$t;
          }
          
          newItem.thumbs=picasaThumbSetSizes('l1', 0, newItem.thumbs, data, kind );
          newItem.thumbs=picasaThumbSetSizes('lN', 5, newItem.thumbs, data, kind );
          
          if( typeof G.O.fnProcessData == 'function' ) {
            G.O.fnProcessData(newItem, 'picasa', data);
          }
          
        
        }

      });

      G.I[albumIdx].contentIsLoaded=true;
    }
  
    
    
    /** @function GetHiddenAlbums */
    var GetHiddenAlbums = function( hiddenAlbums, callback ){
      var lstAlbums = [].concat( hiddenAlbums );
      for( var i=0; i< lstAlbums.length; i++ ) {
        albumAuthkeyGetInfoQueue(lstAlbums[i], callback);
      }
      // dequeue sequentially
      jQuery(document).dequeue('picasaAlbumWithAuthkey');
    }

    // Picasa - retrieves private album
    // The first image is used as the cover image (=album thumbnail)
    function albumAuthkeyGetInfoQueue( albumIDwithAuthkey, callback ) {
      jQuery(document).queue('picasaAlbumWithAuthkey', function() {
        var p=albumIDwithAuthkey.indexOf('&authkey=');
        if( p == -1 ) {
          p=albumIDwithAuthkey.indexOf('?authkey=');
        }
        var albumID=albumIDwithAuthkey.substring(0,p);
        var opt=albumIDwithAuthkey.substring(p);
        if( opt.indexOf('Gv1sRg') == -1 ) {
          opt='&authkey=Gv1sRg'+opt.substring(9);
        }
        var url = picasa.url() + 'user/'+G.O.userID+'/albumid/'+albumID+'?alt=json&kind=photo'+opt+'&max-results=1&thumbsize='+G.picasa.thumbSizes+'&imgmax=d';
        
        NGY2Tools.PreloaderDisplay(G, true);

        jQuery.ajaxSetup({ cache: false });
        jQuery.support.cors = true;
        
        var tId = setTimeout( function() {
          // workaround to handle JSONP (cross-domain) errors
          //PreloaderHide();
          NGY2Tools.PreloaderDisplay(G, false);
          NGY2Tools.nanoAlert(G, 'Could not retrieve AJAX data...');
        }, 60000 );
        jQuery.getJSON(url, function(data, status, xhr) {
          clearTimeout(tId);
          //PreloaderHide();
          NGY2Tools.PreloaderDisplay(G, false);
          console.dir(data);
          
          
          var albumTitle=data.feed.title.$t;
          var source = data.feed.entry[0];

          // var newItem=NGY2ItemNew( albumTitle, albumID, '0', 'album' );
          var newItem=NGY2Item.New( G, albumTitle, '', albumID, '0', 'album' );

          //Get the URL of the thumbnail
          newItem.thumbs=picasaThumbSetSizes('l1', 0, newItem.thumbs, source, 'album' );
          newItem.thumbs=picasaThumbSetSizes('lN', 5, newItem.thumbs, source, 'album' );
   
          if( typeof G.O.fnProcessData == 'function' ) {
            G.O.fnProcessData(newItem, 'picasa', source);
          }
          G.I[1].contentIsLoaded=true;

  
          // dequeue to process the next picasa private album
          if( jQuery(document).queue('picasaAlbumWithAuthkey').length > 0 ) {
            jQuery(document).dequeue('picasaAlbumWithAuthkey');
          }
          else {
            //processStartOptionsPart2();
            callback();
          }

        })
        .fail( function(jqxhr, textStatus, error) {
          clearTimeout(tId);
          NGY2Tools.PreloaderDisplay(G, false);
          //PreloaderHide();
          var err = textStatus + ', ' + error;
          NGY2Tools.nanoAlert(G, "Could not retrieve ajax data (jQuery): " + err);
          jQuery(document).dequeue('picasaAlbumWithAuthkey');
        });      
      });      

    }

    function picasaThumbSetSizes(level, startI, tn, data, kind ) {
      var sizes=['xs','sm','me','la','xl'];
      
      for(var i=0; i<sizes.length; i++ ) {
        tn.url[level][sizes[i]]=data.media$group.media$thumbnail[startI+i].url;
        if( kind == 'image' ) {
          tn.width[level][sizes[i]]=data.media$group.media$thumbnail[startI+i].width;
          tn.height[level][sizes[i]]=data.media$group.media$thumbnail[startI+i].height;

          var gw=data.media$group.media$thumbnail[startI+i].width;
          var gh=data.media$group.media$thumbnail[startI+i].height;
          if( G.tn.settings.width[level][sizes[i]] == 'auto' ) {
            if( gh < G.tn.settings.height[level][sizes[i]] ) {
              // calculate new h/w and change URL
              var ratio=gw/gh;
              tn.width[level][sizes[i]]=gw*ratio;
              tn.height[level][sizes[i]]=gh*ratio;
              var url=tn.url[level][sizes[i]].substring(0, tn.url[level][sizes[i]].lastIndexOf('/'));
              url=url.substring(0, url.lastIndexOf('/')) + '/';
              tn.url[level][sizes[i]]=url+'h'+G.tn.settings.height[level][sizes[i]]+'/';
            }
          }
          if( G.tn.settings.height[level][sizes[i]] == 'auto' ) {
            if( gw < G.tn.settings.width[level][sizes[i]] ) {
              // calculate new h/w and change URL
              var ratio=gh/gw;
              tn.height[level][sizes[i]]=gh*ratio;
              tn.width[level][sizes[i]]=gw*ratio;
              var url=tn.url[level][sizes[i]].substring(0, tn.url[level][sizes[i]].lastIndexOf('/'));
              url=url.substring(0, url.lastIndexOf('/')) + '/';
              tn.url[level][sizes[i]]=url+'w'+G.tn.settings.width[level][sizes[i]]+'/';
            }
          }
        }
        else {
          // albums
          // the Google API returns incorrect height/width values
          if( G.tn.settings.width[level][sizes[i]] != 'auto' ) {
            tn.width[level][sizes[i]]=data.media$group.media$thumbnail[startI+i].width;
          }
          else {
            var url=tn.url[level][sizes[i]].substring(0, tn.url[level][sizes[i]].lastIndexOf('/'));
            url=url.substring(0, url.lastIndexOf('/')) + '/';
            tn.url[level][sizes[i]]=url+'h'+G.tn.settings.height[level][sizes[i]]+'/';
          }
          
          if( G.tn.settings.height[level][sizes[i]] != 'auto' ) { 
            tn.height[level][sizes[i]]=data.media$group.media$thumbnail[startI+i].height;
          }
          else {
              var url=tn.url[level][sizes[i]].substring(0, tn.url[level][sizes[i]].lastIndexOf('/'));
              url=url.substring(0, url.lastIndexOf('/')) + '/';
              tn.url[level][sizes[i]]=url+'w'+G.tn.settings.width[level][sizes[i]]+'/';
          }
        }
      }
      return tn;
    }


    function Init() {
      G.picasa = {
        // cache value in instance to avoid regeneration on each need
        thumbSizes:''
      };

      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.l1.xs, G.tn.settings.height.l1.xs, G.tn.settings.width.l1.xsc, G.tn.settings.height.l1.xsc );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.l1.sm, G.tn.settings.height.l1.sm, G.tn.settings.width.l1.smc, G.tn.settings.height.l1.smc );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.l1.me, G.tn.settings.height.l1.me, G.tn.settings.width.l1.mec, G.tn.settings.height.l1.mec );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.l1.la, G.tn.settings.height.l1.la, G.tn.settings.width.l1.lac, G.tn.settings.height.l1.lac );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.l1.xl, G.tn.settings.height.l1.xl, G.tn.settings.width.l1.xlc, G.tn.settings.height.l1.xlc );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.lN.xs, G.tn.settings.height.lN.xs, G.tn.settings.width.lN.xsc, G.tn.settings.height.lN.xsc );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.lN.sm, G.tn.settings.height.lN.sm, G.tn.settings.width.lN.smc, G.tn.settings.height.lN.smc );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.lN.me, G.tn.settings.height.lN.me, G.tn.settings.width.lN.mec, G.tn.settings.height.lN.mec );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.lN.la, G.tn.settings.height.lN.la, G.tn.settings.width.lN.lac, G.tn.settings.height.lN.lac );
      G.picasa.thumbSizes=picasaAddOneThumbSize(G.picasa.thumbSizes, G.tn.settings.width.lN.xl, G.tn.settings.height.lN.xl, G.tn.settings.width.lN.xlc, G.tn.settings.height.lN.xlc );
    }
    
    function picasaAddOneThumbSize(thumbSizes, v1, v2, c1, c2 ) {
      var v=Math.ceil(v2*G.tn.scale)+c2;
      if( v1 == 'auto' ) {
        v=Math.ceil(v2*G.tn.scale)+c2;
      }
      else if( v2 == 'auto' ) {
          v=Math.ceil(v1*G.tn.scale)+c1;
        }
        else if( v1 > v2 ) {
          v=Math.ceil(v1*G.tn.scale)+c1;
        }
        
      if( thumbSizes.length > 0 ) {
        thumbSizes+=',';
      }
      thumbSizes+=v;
      return thumbSizes;
    }

    
      switch(fnName){
        case 'GetHiddenAlbums':
          var hiddenAlbums = arguments[2],
          callback = arguments[3];
          GetHiddenAlbums(hiddenAlbums, callback);
          //AlbumsGetContent(option, value)
          break;
        case 'AlbumGetContent':
          var albumID = arguments[2],
          callback = arguments[3],
          cbParam1 = arguments[4],
          cbParam2 = arguments[5];
          AlbumGetContent(albumID, callback, cbParam1, cbParam2);
          break;
        case 'Init':
            Init();
          break;
        case '':
          break;
        case '':
          break;
      }
      
      

  };
  

 
 
  
// END NANOGALLERY2
}( jQuery ));
  
  
  
  
  